#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('local-farmers-api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var models = require('../models');

models.sequelize.sync({ force: true })
  .then(async function() {
    const nevers = { type: 'Point', coordinates: [46.987471, 3.150616] };
    const pouges = { type: 'Point', coordinates: [47.076937, 3.094017] };
    const fourchambault = { type: 'Point', coordinates: [47.019237, 3.087279] };
    const varennes = { type: 'Point', coordinates: [47.001512, 3.134294] };

    let farmerNames = [
      'John Doe',
      'Jane Doe',
      'Jenny Doe',
      'Jason Doe'
    ];

    let farmerEmails = [
      'john.doe@farmer.com',
      'jane.doe@farmer.com',
      'jenny.doe@farmer.com',
      'jason.doe@farmer.com'
    ];

    let farmerPhones = [
      '06 12 34 56 78',
      '06 98 76 54 32',
      '07 23 45 67 89',
      '07 87 65 43 21'
    ];

    let farmNames = [
      'My first farm',
      'My second farm',
      'My third farm',
      'My fourth farm'
    ];

    let farmAddress = [
      '12, rue du march√©',
      '34, rue du fromage',
      '98, rue de la tomate',
      "76, rue de l'agriculture"
    ];

    let farmCities = [
      'nevers',
      'pouges',
      'fourchambault',
      'varennes'
    ];

    let farmPostalCodes = [
      58000,
      58320,
      58600,
      58640
    ];

    let farmLocations = [
      nevers,
      pouges,
      fourchambault,
      varennes
    ];

    let imageNames = [
      'first-farm.png',
      'second-farm.png',
      'third-farm.png',
      'fourth-farm.png'
    ]

    for (let i = 0; i < farmNames.length; i++) {
      let farmer = await models.Farmer.create({
        name: farmerNames[i],
        email: farmerEmails[i],
        phone: farmerPhones[i]
      });

      let farm = await models.Farm.create({
        name: farmNames[i],
        address: farmAddress[i],
        city: farmCities[i],
        postal_code: farmPostalCodes[i],
        location: farmLocations[i]
      });

      let image = await models.FarmImage.create({
        name: imageNames[i]
      });

      await farm.addFarmImage(image);

      if ((Math.random() * 100) >= 50) {
        await farmer.addFarm(farm);
        await farm.addFarmer(farmer);
      }
    }

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch(error => console.error(error));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
