#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('local-farmers-api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var models = require('../models');

models.sequelize.sync({ force: true })
  .then(async function() {
    const nevers = { type: 'Point', coordinates: [46.987471, 3.150616] };
    const pouges = { type: 'Point', coordinates: [47.076937, 3.094017] };
    const fourchambault = { type: 'Point', coordinates: [47.019237, 3.087279] };
    const varennes = { type: 'Point', coordinates: [47.001512, 3.134294] };

    const farm1 = await models.Farm.create({
      name: 'My first farm',
      address: '321, beautiful street',
      city: 'Nevers',
      postal_code: 21000,
      location: nevers
    });
    const farm2 = await models.Farm.create({
      name: 'Me second farm',
      address: '654, awesome street',
      city: 'Pouges',
      postal_code: 21000,
      location: pouges
    })

    const farmer1 = await models.Farmer.create({
      name: 'John Doe',
      email: 'john.doe@farmer.com',
      phone: '06 12 34 56 78'
    });

    const farmer2 = await models.Farmer.create({
      name: 'Jane Doe',
      email: 'jane.doe@farmer.com',
      phone: '06 98 76 54 32'
    });

    await farm1.addFarmer(farmer2);
    await farm2.addFarmer(farmer2);
    await farmer2.addFarm(farm1);
    await farmer2.addFarm(farm2);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch(error => console.error(error));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
